#suite s21_calc_complements

#test s21_calc_complements_simple_2x1
  int rows = 2;
  int columns = 2;
  matrix_t A = {0};
  matrix_t R = {0};
  matrix_t C = {0};
  s21_create_matrix(rows, columns, &A);
  s21_create_matrix(rows, columns, &C);
  A.matrix[0][0] = 5;
  A.matrix[0][1] = 1;
  A.matrix[1][0] = 4;
  A.matrix[1][1] = 7;
  C.matrix[0][0] = 7;
  C.matrix[0][1] = -4;
  C.matrix[1][0] = -1;
  C.matrix[1][1] = 5;
  int ret = s21_calc_complements(&A, &R);
  ck_assert_int_eq(0, ret);
  int res = s21_eq_matrix(&C, &R);
  ck_assert_int_eq(SUCCESS, res);
  s21_remove_matrix(&A);
  s21_remove_matrix(&R);
  s21_remove_matrix(&C);

#test s21_calc_complements_simple_3x1
  int rows = 3;
  int columns = 3;
  matrix_t A = {0};
  matrix_t R = {0};
  matrix_t C = {0};
  s21_create_matrix(rows, columns, &A);
  s21_create_matrix(rows, columns, &C);
  A.matrix[0][0] = 6;
  A.matrix[0][1] = 1;
  A.matrix[0][2] = 1;
  A.matrix[1][0] = 4;
  A.matrix[1][1] = 1;
  A.matrix[1][2] = 2;
  A.matrix[2][0] = 3;
  A.matrix[2][1] = 2;
  A.matrix[2][2] = 4;

  C.matrix[0][0] = 0;
  C.matrix[0][1] = -10;
  C.matrix[0][2] = 5;
  C.matrix[1][0] = -2;
  C.matrix[1][1] = 21;
  C.matrix[1][2] = -9;
  C.matrix[2][0] = 1;
  C.matrix[2][1] = -8;
  C.matrix[2][2] = 2;
  int ret = s21_calc_complements(&A, &R);
  ck_assert_int_eq(0, ret);
  int res = s21_eq_matrix(&C, &R);
  ck_assert_int_eq(SUCCESS, res);
  s21_remove_matrix(&A);
  s21_remove_matrix(&R);
  s21_remove_matrix(&C);

#test s21_calc_complements_matrix_right1
  int rows = rand() % 10 + 1;
  matrix_t A = {0};
  matrix_t R = {0};
  s21_create_matrix(rows, rows, &A);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < rows; j++) {
      double t = rand();
      A.matrix[i][j] = t / 7;
    }
  }
  int ret = s21_calc_complements(&A, &R);
  ck_assert_int_eq(0, ret);
  s21_remove_matrix(&A);
  s21_remove_matrix(&R);

#test s21_calc_complements_wrong_rc1
  int rows = rand() % 100 + 1;
  matrix_t A = {0};
  matrix_t R = {0};
  s21_create_matrix(rows, rows + 1, &A);
  int ret = s21_calc_complements(&A, &R);
  ck_assert_int_eq(2, ret);
  s21_remove_matrix(&A);

#test s21_calc_complements_null1
  int rows = 0;
  int columns = rand() % 100 + 1;
  matrix_t A = {0};
  matrix_t R = {0};
  s21_create_matrix(rows, columns, &A);
  int ret = s21_calc_complements(&A, &R);
  ck_assert_int_eq(1, ret);
  s21_remove_matrix(&A);

#test s21_calc_complements1
  double m[3][3] = {{1, 2, 3}, {0, 4, 2}, {5, 2, 1}};
  double r[3][3] = {{0, 10, -20}, {4, -14, 8}, {-8, -2, 4}};
  matrix_t matrix, res_org, res_my;
  s21_create_matrix(3, 3, &matrix);
  s21_create_matrix(3, 3, &res_org);
  for (int i = 0; i < matrix.rows; i++) {
    for (int j = 0; j < matrix.columns; j++) {
      matrix.matrix[i][j] = m[i][j];
    }
  }
  for (int i = 0; i < matrix.rows; i++) {
    for (int j = 0; j < matrix.columns; j++) {
      res_org.matrix[i][j] = r[i][j];
    }
  }
  int ret = s21_calc_complements(&matrix, &res_my);
  ck_assert_int_eq(ret, 0);
  ret = s21_eq_matrix(&res_org, &res_my);
  ck_assert_int_eq(ret, 1);
  s21_remove_matrix(&matrix);
  s21_remove_matrix(&res_my);



